generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  nickname    String
  email       String  @unique
  social_type String
  role        String? @default("user")

  questions      Question[]
  answers        Answer[]
  answer_likes   AnswerLike[]
  question_likes QuestionLike[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  questions Question[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Question {
  id      Int    @id @default(autoincrement())
  content String @unique

  answers    Answer[]
  categories Category[]
  likes      QuestionLike[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Answer {
  id      Int          @id @default(autoincrement())
  content String
  visible Boolean?     @default(true)
  likes   AnswerLike[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  userId     Int
}

model QuestionLike {
  created_at DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userId     Int
  questionId Int

  @@id([userId, questionId])
}

model AnswerLike {
  created_at DateTime @default(now())

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  userId   Int
  answerId Int

  @@id([userId, answerId])
}
